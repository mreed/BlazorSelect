@inherits SelectBase
<Styled @bind-Classname="BlazerSelect_multivalue">
    background-color:rgb(230,230,230);
    border-radius: 2px;
    display:flex;
    margin: 1px;
    min-width: 0px;
</Styled>
<Styled @bind-Classname="BlazerSelect_multivaluelabel">
    border-radius:6px;
    color:rgb(51,51,51);
    font-size:85%;
    overflow:hidden;
    padding:3px;
    padding-left:6px;
    text-overflow:ellipsis;
    white-space:nowrap;
</Styled>
<Styled @bind-Classname="BlazorSelect_multivalueremove">
    align-items:center;
    border-radius:6px;
    display:flex;
    padding-left:4px;
    padding-right:4px;
    &:hover {
    background-color: #FFBDAD;
    color: #DE350B;
    }
</Styled>
<div class="@BlazerSelect_multivalue">
    <div class="@BlazerSelect_multivaluelabel">
        @ChildContent
    </div>
    <div @onclick="Remove" class="@BlazorSelect_multivalueremove"><CrossIcon size="20" /></div>
</div>


@code {
    private string BlazerSelect_multivalue, BlazerSelect_multivaluelabel, BlazorSelect_multivalueremove;
    protected override void OnInitialized()
    {
        Name = "MultiValue";
        base.OnInitialized();
    }
    [CascadingParameter(Name = "IndicatorDownClicked")]
    public bool IndicatorDownClicked { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback<OptionData> onRemove { get; set; }
    [Parameter]
    public OptionData data { get; set; }
    protected async void Remove()
    {
        await onRemove.InvokeAsync(data);
    }
    protected override bool ShouldRender()
    {
        if (IndicatorDownClicked) return false;
        return base.ShouldRender();
    }
}